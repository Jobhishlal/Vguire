

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Modern Checkout</title>
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
 
  <style>
    :root {
      --primary-color: #2874f0;
      --secondary-color: #fb641b;
      --text-color: #212121;
      --light-gray: #f8f9fa;
      --border-radius: 12px;
    }

    body {
      background-color: #f1f3f6;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: var(--text-color);
    }

    .checkout-wrapper {
      max-width: 1400px;
      margin: 2rem auto;
      padding: 0 1rem;
    }

    .page-title {
      color: var(--primary-color);
      font-weight: 600;
      margin-bottom: 2rem;
      position: relative;
      padding-bottom: 0.5rem;
    }

    .page-title::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 60px;
      height: 3px;
      background-color: var(--secondary-color);
    }

    .section-card {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      transition: transform 0.2s;
    }

    .section-card:hover {
      transform: translateY(-2px);
    }

    .order-item {
      background: var(--light-gray);
      border-radius: var(--border-radius);
      padding: 1.5rem;
      margin-bottom: 1rem;
      border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .order-item img {
      border-radius: var(--border-radius);
      object-fit: cover;
      height: 150px;
      width: 100%;
    }

    .product-details h4 {
      color: var(--primary-color);
      font-size: 1.2rem;
      margin-bottom: 1rem;
    }

    .quantity-control {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin: 1rem 0;
    }

    .quantity-input {
      max-width: 100px;
    }

    .address-card {
      border: 2px solid #e0e0e0;
      border-radius: var(--border-radius);
      padding: 1rem;
      margin-bottom: 1rem;
      cursor: pointer;
      transition: border-color 0.2s;
    }

    .address-card:hover {
      border-color: var(--primary-color);
    }

    .address-card.selected {
      border-color: var(--primary-color);
      background-color: #f8f9fa;
    }

    .btn-custom-primary {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 0.8rem 1.5rem;
      border-radius: var(--border-radius);
      transition: all 0.3s;
    }

    .btn-custom-primary:hover {
      background-color: #1a5cbd;
      transform: translateY(-1px);
    }

    .btn-custom-secondary {
      background-color: var(--secondary-color);
      color: white;
    }

    .btn-custom-secondary:hover {
      background-color: #e85a19;
    }

    .modal-content {
      border-radius: var(--border-radius);
    }

    .modal-header {
      background-color: var(--primary-color);
      color: white;
      border-top-left-radius: var(--border-radius);
      border-top-right-radius: var(--border-radius);
    }

    .form-control, .form-select {
      border-radius: 8px;
      padding: 0.8rem;
      border: 1px solid #ddd;
    }

    .form-control:focus, .form-select:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 0.2rem rgba(40, 116, 240, 0.25);
    }

    .summary-card {
      position: sticky;
      top: 20px;
    }

    .price-detail {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
    }

    .total-price {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--primary-color);
      border-top: 1px solid #ddd;
      padding-top: 1rem;
      margin-top: 1rem;
    }

    @media (max-width: 768px) {
      .order-item {
        flex-direction: column;
      }
      
      .product-details {
        margin-top: 1rem;
      }

      .summary-card {
        position: static;
        margin-top: 1rem;
      }
    }
    .checkout-form {
            max-width: 500px;
            margin: auto;
            padding: 20px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        .form-label {
            font-weight: 600;
        }
        .form-select {
            height: 45px;
        }
        .btn-primary {
            background: #007bff;
            border: none;
            font-size: 18px;
            padding: 10px;
            border-radius: 5px;
            width: 100%;
            transition: 0.3s;
        }
        .btn-primary:hover {
            background: #0056b3;
        }

        .navbar {
    padding: 1rem;
    background: white;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.navbar-brand img {
    width: 60px;
    margin-right: 50px;
}

@media (max-width: 992px) {
    .navbar-brand img {
        margin-right: 0;
    }
    
    .nav-link {
        padding: 0.5rem 0;
        border-bottom: 1px solid #eee;
    }

    .navbar .d-flex {
        margin-top: 1rem;
        justify-content: center;
    }
}

.nav-link {
    color: var(--primary-color);
    margin: 0 1rem;
    position: relative;
}

.nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: var(--secondary-color);
    transition: width 0.3s ease;
}

.nav-link:hover::after {
    width: 100%;
}

.login-btn {
    background: var(--secondary-color);
    color: white;
    padding: 0.5rem 1.5rem;
    border-radius: 25px;
    transition: all 0.3s ease;
    text-decoration: none;
}

.login-btn:hover {
    background: #ff2e43;
    color: white;
    transform: translateY(-2px);
}

.footer {
    background: black;
    color: white;
    padding: 4rem 0 2rem;
}

@media (max-width: 768px) {
    .footer {
        padding: 2rem 0 1rem;
        text-align: center;
    }
    
    .footer .col-md-4 {
        margin-bottom: 2rem;
    }
}

.footer-links {
    list-style: none;
    padding: 0;
}

.footer-links li {
    margin-bottom: 1rem;
}

.footer-links a {
    color: white;
    text-decoration: none;
    transition: color 0.3s ease;
}

.footer-links a:hover {
    color: var(--secondary-color);
}
.breadcrumb {
    list-style: none;
    display: flex;
    gap: 8px;
    font-size: 14px;
    padding: 10px 0;
}

.breadcrumb li {
    display: flex;
    align-items: center;
}

.breadcrumb li a {
    text-decoration: none;
    color: #007bff; /* Blue color */
    font-weight: 500;
    transition: color 0.3s ease-in-out;
}

.breadcrumb li a:hover {
    color: #0056b3; /* Darker blue on hover */
}

.breadcrumb li::after {
    content: "â€º"; /* Breadcrumb separator */
    margin: 0 8px;
    color: #666;
}

.breadcrumb li:last-child::after {
    content: ""; /* Remove separator from last item */
}


    
  </style>
</head>
<body>

  <nav class="navbar navbar-expand-lg fixed-top">
    <div class="container">
        <a class="navbar-brand" href="#">
            <img src="/image/Screenshot 2025-01-02 185508.png" alt="Logo">
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/user/home">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/user/shop">Shop</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Contact</a>
                </li>
                <li class="nav-item">   
                    <a class="nav-link" href="#">Profile</a>
                </li>
            </ul>
            <div class="d-flex align-items-center">
                
                <a href="#" class="me-3"><i class="fas fa-search"></i></a>
                <a href="#" class="me-3"><i class="fas fa-shopping-cart"></i></a>
                <a href="#"><i class="fas fa-heart"></i></a>
            </div>
        </div>
    </div>
</nav> 


<div class="container" style="margin-top: 100px;">
  <ul class="breadcrumb">
      <% breadcrumbs.forEach(breadcrumb => { %>
          <li><a href="<%= breadcrumb.url %>"><%= breadcrumb.name %></a></li>
      <% }) %>
  </ul>
</div>
  <div class="checkout-wrapper" style="margin-top: 30px;">
    
    
    <div class="row">
      <div class="col-lg-8">
        <!-- Items Section -->
        <div class="section-card">
          <h3 class="mb-4"><i class="fas fa-shopping-cart me-2"></i>Your Items</h3>
          <% items.forEach(item => { %>
            <div class="order-item">
              <div class="row align-items-center">
                <div class="col-md-3">
                <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>" class="img-fluid">
                </div>
                <div class="col-md-9 product-details">
                  <h4><%= item.product.name %></h4>
                  <p class="text-muted">Size: <%= item.size %></p>
                  <% if(checkoutType == 'single'){ %>
                    <form action="/user/checkout/update-quantity" method="POST" class="updateQuantityForm">
                      <input type="hidden" name="productId" value="<%= item.product._id %>">
                      <input type="hidden" name="size" value="<%= item.size %>">
                      <input type="hidden" name="redirectUrl" value="<%= currentCheckoutUrl %>">
                      <div class="quantity-control">
                        <label for="quantity" class="form-label">Quantity:</label>
                        <input type="number" class="form-control quantity-input" name="quantity" 
                               value="<%= item.quantity %>" min="1" max="5" required>
                        <button type="submit" class="btn btn-custom-primary">Update</button>
                      </div>
                    </form>
                  <% } else { %>
                    <p>Quantity: <strong><%= item.quantity %></strong></p>
                  <% } %>
                  <div class="mt-3">
                    <p class="mb-1">Unit Price: <strong>
                      â‚¹<%= (item.product.Offerprice !== undefined && item.product.Offerprice > 0 ? 
                            item.product.Offerprice.toLocaleString() : 
                            item.product.price.toLocaleString()) %>
                  </strong></p>
                  <p class="mb-0">Total: <strong class="text-primary">
                    â‚¹<%= ((item.product.Offerprice !== undefined && item.product.Offerprice > 0 ? 
                          item.product.Offerprice : item.product.price) * item.quantity).toLocaleString() %>
                </strong></p>
                  </div>
                </div>
              </div>
            </div>
          <% }); %>
        </div>

        <div class="section-card">
          <h3 class="mb-4"><i class="fas fa-tags me-2"></i> Apply Coupon</h3>
          <button type="button" class="btn btn-custom-primary" data-bs-toggle="modal" data-bs-target="#couponModal">
              View Available Coupons
          </button>
          <p id="couponMessage" class="mt-2 text-success"></p>
          <p id="couponMessage" class="mt-2 text-success"></p>
          <button id="removeCouponBtn" class="btn btn-danger d-none">Remove Coupon</button>

      </div>
      
      <!-- Coupon Modal -->
      <div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <% if (availableCoupons.length > 0) { %>
                        <ul class="list-group">
                            <% availableCoupons.forEach(coupon => { %>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><strong><%= coupon.code %></strong> - <%= coupon.discountType === 'percentage' ? coupon.value + '%' : 'â‚¹' + coupon.value %> off</span>
                                    <button class="btn btn-sm btn-outline-success apply-coupon-btn" data-code="<%= coupon.code %>">Apply</button>
                                </li>
                            <% }); %>
                        </ul>
                    <% } else { %>
                        <p>No available coupons at the moment.</p>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    
      

        <!-- Address Section -->
        <div class="section-card">
          <h3 class="mb-4"><i class="fas fa-map-marker-alt me-2"></i>Shipping Address</h3>
          <% if (addresses && addresses.length > 0) { %>
            <div class="mb-3">
              <select id="addressSelect" class="form-select">
                <% addresses.forEach(addr => { %>
                  <option value="<%= addr._id %>"
                          data-fullname="<%= addr.fullName %>"
                          data-phone="<%= addr.phone %>"
                          data-street="<%= addr.streetAddress %>"
                          data-city="<%= addr.city %>"
                          data-state="<%= addr.state %>"
                          data-pincode="<%= addr.pincode %>"
                          data-addresstype="<%= addr.addressType %>">
                    <%= addr.fullName %> - <%= addr.streetAddress %>, <%= addr.city %>
                  </option>
                <% }); %>
              </select>
            </div>
            <button type="button" class="btn btn-outline-primary me-2" id="editAddressBtn" data-bs-toggle="modal" data-bs-target="#editAddressModal">
              <i class="fas fa-edit me-2"></i>Edit Address
            </button>
          <% } else { %>
            <p class="text-muted">No saved addresses found.</p>
          <% } %>
          <button type="button" class="btn btn-custom-primary" id="addNewAddressBtn" data-bs-toggle="modal" data-bs-target="#addAddressModal">
            <i class="fas fa-plus me-2"></i>Add New Address
          </button>
        </div>
      </div>

      <!-- Order Summary Section -->
      <div class="col-lg-4">
        <div class="section-card summary-card">
          <h3 class="mb-4"><i class="fas fa-clipboard-list me-2"></i>Order Summary</h3>
          <div class="price-detail">
            <span>Items Total</span><div class="price-detail">
              
              <span>â‚¹<%= totalAmount ? totalAmount.toLocaleString() : "0" %></span>
            </div>
          </div>
          <div class="price-detail">
            <span>Delivery Charges</span>
            <span class="text-success">FREE</span>
          </div>
          <div class="price-detail total-price">
            <span>Total Amount</span>
            <span>â‚¹<%= totalAmount.toLocaleString() %></span>
          </div>
          <form id="checkoutForm" action="/user/checkout/placeorder" method="POST" class="mt-4" data-total-amount="<%= totalAmount %>">
            <!-- Address Check -->
            <% if (typeof selectedAddressId !== 'undefined' && selectedAddressId) { %>
                <input type="hidden" name="addressId" value="<%= selectedAddressId %>">
            <% } else { %>
                <div class="alert alert-danger" role="alert">
                    Please select an address before placing your order.
                </div>
            <% } %>
        
            <!-- Hidden Inputs for Cart Items -->
            <% items.forEach((item, index) => { %>
                <input type="hidden" name="items[<%= index %>][productId]" value="<%= item.product._id %>">
                <input type="hidden" name="items[<%= index %>][size]" value="<%= item.size %>">
                <input type="hidden" name="items[<%= index %>][quantity]" value="<%= item.quantity %>">
            <% }); %>
        
            <!-- Hidden Input for Total Amount -->
            <input type="hidden" name="totalAmount" id="totalAmount" value="<%= totalAmount %>" data-original-amount="<%= totalAmount %>">

        
            <!-- Payment Method Selection -->
            <div class="mb-4">
                <label><i class="fas fa-credit-card me-2"></i>Payment Method</label>
                <select id="paymentMethod" name="paymentMethod" class="form-select" required>
                    <option value="COD">Cash on Delivery</option>
                    <option value="UPI">Online Payment</option>
                    <option value="Wallet">Wallet Payment</option>
                </select>
            </div>
        
            <!-- Submit Button -->
            <% if (typeof selectedAddressId !== 'undefined' && selectedAddressId) { %>
                <button type="submit" class="btn btn-custom-secondary w-100">
                    <i class="fas fa-shopping-bag me-2"></i> Place Order
                </button>
            <% } else { %>
                <button type="button" class="btn btn-secondary w-100" disabled>
                    <i class="fas fa-shopping-bag me-2"></i> Select an Address to Order
                </button>
            <% } %>
        </form>
        
        
        
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Address Modal -->
  <div class="modal fade" id="editAddressModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title"><i class="fas fa-edit me-2"></i>Edit Address</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editAddressForm" action="/user/address/edit" method="POST">
            <input type="hidden" name="redirectUrl" value="<%= currentCheckoutUrl %>">
            <input type="hidden" name="addressId" id="editAddressId">
            <div class="mb-3">
              <input type="text" name="fullName" id="editFullName" class="form-control" placeholder="Full Name">
            </div>
            <div class="mb-3">
              <input type="text" name="phone" id="editPhone" class="form-control"  placeholder="Phone">
            </div>
            <div class="mb-3">
              <input type="text" name="streetAddress" id="editStreetAddress" class="form-control"  placeholder="Street Address">
            </div>
            <div class="mb-3">
              <input type="text" name="city" id="editCity" class="form-control"  placeholder="City">
            </div>
            <div class="mb-3">
              <input type="text" name="state" id="editState" class="form-control" required placeholder="State">
            </div>
            <div class="mb-3">
              <input type="text" name="pincode" id="editPincode" class="form-control" required placeholder="Pincode">
            </div>
            <div class="mb-3">
              <select name="addressType" id="editAddressType" class="form-select" required>
                <option value="Home">Home</option>
                <option value="Work">Work</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <button type="submit" class="btn btn-custom-primary w-100">Update Address</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Address Modal -->
  <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Add New Address</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <form id="addAddressForm" action="/user/address/add" method="POST">
                <input type="hidden" name="redirectUrl" value="<%= currentCheckoutUrl %>">
                <input type="text" name="fullName" class="form-control"  placeholder="Full Name">
                <input type="text" name="phone" class="form-control" placeholder="Phone">
                <input type="text" name="streetAddress" class="form-control"  placeholder="Street Address">
                <input type="text" name="city" class="form-control"  placeholder="City">
                <input type="text" name="state" class="form-control"  placeholder="State">
                <input type="text" name="pincode" class="form-control"  placeholder="Pincode">
                <select name="addressType" class="form-control" >
                    <option value="Home">Home</option>
                    <option value="Work">Work</option>
                    <option value="Other">Other</option>
                </select>
                <button type="submit" class="btn btn-success mt-2">Save Address</button>
            </form>
            
        </div>
      </div>
    </div>
  </div>

  
 

  <footer class="footer" style="display: block;">
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <h4>About Us</h4>
                <p>We are committed to providing the best products and services to our customers.</p>
            </div>
            <div class="col-md-4">
                <h4>Quick Links</h4>
                <ul class="footer-links">
                    <li><a href="#">Home</a></li>
                    <li><a href="#">Shop</a></li>
                    <li><a href="#">About</a></li>
                    <li><a href="#">Contact</a></li>
                </ul>
            </div>
            <div class="col-md-4">
                <h4>Contact Us</h4>
                <ul class="footer-links">
                    <li><i class="fas fa-phone me-2"></i> +1 234 567 890</li>
                    <li><i class="fas fa-envelope me-2"></i> info@example.com</li>
                    <li><i class="fas fa-map-marker-alt me-2"></i> 123 Street, City, Country</li>
                </ul>
            </div>
        </div>
        <div class="text-center mt-4">
            <p>&copy; 2025 Your Company. All rights reserved.</p>
        </div>
    </div>
</footer>



  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>




// document.getElementById("checkoutForm").addEventListener("submit", async function(event) {
//     event.preventDefault();

//     const totalAmount = parseFloat(document.getElementById("totalAmount").value);
//     const paymentMethod = document.getElementById("paymentMethod").value;
//     const addressId = document.querySelector("input[name='addressId']")?.value;
    
//     const items = Array.from(document.querySelectorAll("input[name^='items']"))
//         .reduce((acc, input) => {
//             const matches = input.name.match(/items\[(\d+)\]\[(.+)\]/);
//             if (matches) {
//                 const [_, index, key] = matches;
//                 acc[index] = acc[index] || {};
//                 acc[index][key] = input.value;
//             }
//             return acc;
//         }, []);

//     if (!addressId || items.length === 0) {
//         Swal.fire("Error", "Address and items are required to place an order.", "error");
//         return;
//     }
//     if (paymentMethod === "COD" && totalAmount > 1000) {
//     Swal.fire("Error", "Cash on Delivery is not available for orders above â‚¹1000. Please choose another payment method.", "error");
//     return;

//         Swal.fire({
//             title: "Order Placed!",
//             text: "Your order has been placed successfully.",
//             icon: "success",
//             confirmButtonText: "OK",
//             allowOutsideClick: false
//         }).then((result) => {
//             if (result.isConfirmed) {
//                 event.target.submit();
//             }
//         });

//     } else if (paymentMethod === "UPI") {
//         try {
//             const response = await fetch("/user/checkout/razorpay-order", {
//                 method: "POST",
//                 headers: { "Content-Type": "application/json" },
//                 body: JSON.stringify({ amount: totalAmount, addressId, items })
//             });

//             const order = await response.json();
            
//             if (!order || !order.id) {
//                 Swal.fire("Error", "Failed to create Razorpay order.", "error");
//                 return;
//             }

//             const userId = order.userId;
            
//             if (!userId) {
//                 Swal.fire("Error", "User authentication issue. Please log in again.", "error");
//                 return;
//             }

//             const options = {
//                 key: order.razorpayKey,
//                 amount: order.amount,
//                 currency: "INR",
//                 name: "VGUIRE Ecommerce",
//                 description: "Order Payment",
//                 order_id: order.id,
//                 handler: async function (response) {
//                     const verifyResponse = await fetch("/user/checkout/verify-payment", {
//                         method: "POST",
//                         headers: { "Content-Type": "application/json" },
//                         body: JSON.stringify({ 
//                             ...response, 
//                             addressId, 
//                             items,
//                             totalAmount,
//                             userId
//                         })
//                     })
                    

//                     const verificationResult = await verifyResponse.json();
//                     if (verificationResult.success) {
//                         Swal.fire({
//                             title: "Payment Successful!",
//                             text: "Congratulations! Your order is confirmed.",
//                             icon: "success",
//                             confirmButtonText: "OK",
//                             allowOutsideClick: false
//                         }).then(() => {
//                             window.location.href = "/user/order-success";
//                         });
//                     } else {
//                         Swal.fire("Payment Failed", "Transaction could not be verified.", "error");
//                     }
//                 }, modal: {
//                     escape: false, 
//                     ondismiss: function () {
//                         Swal.fire({
//                             icon: "error",
//                             title: "Payment Failed!",
//                             text: "You exited the payment process. Please try again.",
//                             confirmButtonText: "OK"
//                         });
//                     }
//                 },
//                 theme: { color: "#3399cc" }
//             };

//             const razorpay = new window.Razorpay(options);
//             razorpay.open();
//         } catch (error) {
//             console.error("Payment Error:", error);
//             Swal.fire("Error", "Something went wrong. Please try again.", "error");
//         }

//     } else if (paymentMethod === "Wallet") {
//       try {
//         const response = await fetch("/user/checkout/placeorderwallet", {
//             method: "POST",
//             headers: { "Content-Type": "application/json" },
//             body: JSON.stringify({ totalAmount, addressId, items })
//         });

//         const textResponse = await response.text();

//         try {
//             const walletOrderResult = JSON.parse(textResponse); 
//             if (walletOrderResult.success) {
//                 Swal.fire({
//                     title: "Payment Successful!",
//                     text: "Your order has been placed using wallet balance.",
//                     icon: "success",
//                     confirmButtonText: "OK",
//                     allowOutsideClick: false
//                 }).then(() => {
//                     window.location.href = "/user/order-success";
//                 });
//             } else {
//                 Swal.fire("Error", walletOrderResult.message || "Something went wrong.", "error");
//             }
//         } catch (jsonError) {
//             console.error("JSON Parsing Error:", jsonError, textResponse);
//             Swal.fire("Error", "Unexpected response from server.", "error");
//         }
//     } catch (error) {
//         console.error("Wallet Payment Fetch Error:", error);
//         Swal.fire("Error", "Something went wrong. Please try again.", "error");
//     }
//     }
// });
document.getElementById("checkoutForm").addEventListener("submit", async function(event) {
    event.preventDefault();

    const totalAmount = parseFloat(document.getElementById("totalAmount").value);
    const paymentMethod = document.getElementById("paymentMethod").value;
    const addressId = document.querySelector("input[name='addressId']")?.value;

    const items = Array.from(document.querySelectorAll("input[name^='items']"))
        .reduce((acc, input) => {
            const matches = input.name.match(/items\[(\d+)\]\[(.+)\]/);
            if (matches) {
                const [_, index, key] = matches;
                acc[index] = acc[index] || {};
                acc[index][key] = input.value;
            }
            return acc;
        }, []);

    if (!addressId || items.length === 0) {
        Swal.fire("Error", "Address and items are required to place an order.", "error");
        return;
    }

    if (paymentMethod === "COD" && totalAmount > 1000) {
        Swal.fire("Error", "Cash on Delivery is not available for orders above â‚¹1000. Please choose another payment method.", "error");
        return;
    }

    if (paymentMethod === "UPI") {
        try {
            const response = await fetch("/user/checkout/razorpay-order", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ amount: totalAmount, addressId, items })
            });

            const order = await response.json();

            if (!order || !order.id) {
                Swal.fire("Error", "Failed to create Razorpay order.", "error");
                return;
            }

            const userId = order.userId;

            if (!userId) {
                Swal.fire("Error", "User authentication issue. Please log in again.", "error");
                return;
            }

            const options = {
                key: order.razorpayKey,
                amount: order.amount,
                currency: "INR",
                name: "VGUIRE Ecommerce",
                description: "Order Payment",
                order_id: order.id,
                handler: async function (response) {
                    const verifyResponse = await fetch("/user/checkout/verify-payment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            ...response,
                            addressId,
                            items,
                            totalAmount,
                            userId
                        })
                    });

                    const verificationResult = await verifyResponse.json();
                    if (verificationResult.success) {
                        Swal.fire({
                            title: "Payment Successful!",
                            text: "Congratulations! Your order is confirmed.",
                            icon: "success",
                            confirmButtonText: "OK",
                            allowOutsideClick: false
                        }).then(() => {
                            window.location.href = "/user/order-success";
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Payment Failed!",
                            text: "Transaction could not be verified. Do you want to retry the payment?",
                            showCancelButton: true,
                            confirmButtonText: "Retry",
                            cancelButtonText: "Cancel"
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Retry payment logic
                                razorpay.open();
                            } else if (result.dismiss === Swal.DismissReason.cancel) {
                                // Store order with payment status as pending
                                storeOrderAsPending(order.id, addressId, items, totalAmount, userId);
                            }
                        });
                    }
                },
                modal: {
                    escape: false,
                    ondismiss: function () {
                        Swal.fire({
                            icon: "question",
                            title: "Payment Cancelled!",
                            text: "Do you want to retry the payment or place the order with payment status as Pending?",
                            showCancelButton: true,
                            confirmButtonText: "Retry",
                            cancelButtonText: "Place Order",
                            showDenyButton: true,
                            denyButtonText: "Cancel Order"
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Retry payment logic
                                razorpay.open();
                            } else if (result.dismiss === Swal.DismissReason.cancel) {
                                // Place order with payment status as pending
                                storeOrderAsPending(order.id, addressId, items, totalAmount, userId);
                            } else if (result.isDenied) {
                                Swal.fire("Order Cancelled", "Your order has been cancelled.", "info");
                            }
                        });
                    }
                },
                theme: { color: "#3399cc" }
            };

            const razorpay = new window.Razorpay(options);
            razorpay.open();
        } catch (error) {
            console.error("Payment Error:", error);
            Swal.fire("Error", "Something went wrong. Please try again.", "error");
        }
    } else if (paymentMethod === "Wallet") {
        try {
            const response = await fetch("/user/checkout/placeorderwallet", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ totalAmount, addressId, items })
            });

            const textResponse = await response.text();

            try {
                const walletOrderResult = JSON.parse(textResponse);
                if (walletOrderResult.success) {
                    Swal.fire({
                        title: "Payment Successful!",
                        text: "Your order has been placed using wallet balance.",
                        icon: "success",
                        confirmButtonText: "OK",
                        allowOutsideClick: false
                    }).then(() => {
                        window.location.href = "/user/order-success";
                    });
                } else {
                    Swal.fire("Error", walletOrderResult.message || "Something went wrong.", "error");
                }
            } catch (jsonError) {
                console.error("JSON Parsing Error:", jsonError, textResponse);
                Swal.fire("Error", "Unexpected response from server.", "error");
            }
        } catch (error) {
            console.error("Wallet Payment Fetch Error:", error);
            Swal.fire("Error", "Something went wrong. Please try again.", "error");
        }
    }
});
async function storeOrderAsPending(orderId, addressId, items, totalAmount, userId, couponCode = 0, discountAmount = 0, appliedCoupon = null, couponDetails = null) {
    // Ensure totalAmount is a number
    totalAmount = parseFloat(totalAmount);

    if (isNaN(totalAmount)) {
        console.error("totalAmount is not a valid number:", totalAmount);
        Swal.fire("Error", "Invalid total amount. Please try again.", "error");
        return;
    }

    const estimatedDeliveryDate = new Date();
    estimatedDeliveryDate.setDate(estimatedDeliveryDate.getDate() + 5);

    const payload = {
        razorpay_order_id: orderId,
        razorpay_payment_id: null,
        razorpay_signature: null,
        addressId,
        items,
        totalAmount: totalAmount + discountAmount,
        userId,
        couponCode,
        paymentStatus: "Pending",
        orderStatus: "Pending",
        couponDiscount: discountAmount,
        appliedCoupon,
        paymentMethod: "UPI",
        deliveryDate: estimatedDeliveryDate,
        couponDetails
    };

    console.log("Payload being sent to server:", payload);

    try {
        const response = await fetch("/user/checkout/verify-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error("Server responded with status:", response.status, "and text:", errorText);
            Swal.fire("Error", `Failed to save the order. Server responded with: ${errorText}`, "error");
            return;
        }

        const result = await response.json();
        if (result.success) {
            Swal.fire("Order Saved", "Your order has been saved with a pending status.", "success");
        } else {
            Swal.fire("Error", "Failed to save the order. Please try again.", "error");
        }
    } catch (error) {
        console.error("Error storing order:", error);
        Swal.fire("Error", "Something went wrong while saving the order. Please try again.", "error");
    }
}



document.querySelectorAll(".updateQuantityForm").forEach(form => {
    form.addEventListener("submit", async function (e) {
        e.preventDefault(); 
        
        const quantityInput = this.querySelector(".quantityInput");
        const quantity = parseInt(quantityInput.value);
        const productId = this.querySelector("input[name='productId']").value;
        const size = this.querySelector("input[name='size']").value;

        console.log(" Checking quantity:", quantity);

  
        const response = await fetch("/user/checkout/update-quantity", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ productId, size, quantity })
        });

        const data = await response.json();

        if (!data.success) {
            Swal.fire({
                icon: "error",
                title: "Limit Exceeded",
                text: data.message || "You can buy a maximum of 5 items."
            });
            return; 
        }

        console.log(" Quantity is valid - Submitting form");
        this.submit(); 
    });
});

console.log(" Address ID Sent to Backend:", document.querySelector('input[name="addressId"]').value);


document.getElementById("editAddressBtn").addEventListener("click", () => {
    const selectedOption = document.getElementById("addressSelect").selectedOptions[0];

    if (!selectedOption) {
        alert("Please select an address to edit.");
        return;
    }

    
    document.getElementById("editAddressId").value = selectedOption.value;
    document.getElementById("editFullName").value = selectedOption.getAttribute("data-fullname");
    document.getElementById("editPhone").value = selectedOption.getAttribute("data-phone");
    document.getElementById("editStreetAddress").value = selectedOption.getAttribute("data-street");
    document.getElementById("editCity").value = selectedOption.getAttribute("data-city");
    document.getElementById("editState").value = selectedOption.getAttribute("data-state");
    document.getElementById("editPincode").value = selectedOption.getAttribute("data-pincode");
    document.getElementById("editAddressType").value = selectedOption.getAttribute("data-addresstype");
});

document.getElementById("editAddressForm").addEventListener("submit", async function (e) {
    e.preventDefault();

    const formData = new FormData(this);
    const addressId = document.getElementById("editAddressId").value;
    if (!addressId) {
        Swal.fire({
            icon: "error",
            title: "Missing Address ID",
            text: "Please select an address to edit.",
            confirmButtonText: "OK"
        });
        return;
    }

    try {
        const response = await fetch(`/user/address/edit/${addressId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(Object.fromEntries(formData.entries())),
        });

        const data = await response.json();

        if (!data.success) {
            Swal.fire({
                icon: "error",
                title: "Validation Errors",
                html: `<ul style="text-align: left;">${data.errors.map(error => `<li>${error}</li>`).join('')}</ul>`,
                confirmButtonText: "OK"
            });
            return;
        }

      
        Swal.fire({
            icon: "success",
            title: "Address Updated",
            text: "Your address has been successfully updated.",
            timer: 15000,
            showConfirmButton: false,
            
           
            
        },console.log(window.location.href) , console.log(data.redirectUrl)
        
        ).then(() => {
          console.log(window.location.href);
          
            window.location.href = data.redirectUrl;
            console.log(data.redirectUrl);
            
        });

    } catch (error) {
        Swal.fire({
            icon: "error",
            title: "Server Error",
            text: "Something went wrong. Please try again later.",
            confirmButtonText: "OK"
        });
    }
});


function updateHiddenQuantity(input) {
      input.setAttribute("value", input.value);
  }


//   document.addEventListener("DOMContentLoaded", () => {
//     document.querySelectorAll(".apply-coupon-btn").forEach(button => {
//         button.addEventListener("click", async function () {
//             const couponCode = this.getAttribute("data-code");

//             if (!couponCode) {
//                 Swal.fire("Error", "Coupon code is missing.", "error");
//                 return;
//             }

//             const totalAmount = parseFloat(document.getElementById("totalAmount")?.value || 0);
//             if (isNaN(totalAmount)) {
//                 Swal.fire("Error", "Invalid total amount.", "error");
//                 return;
//             }

//             try {
//                 const response = await fetch("/user/checkout/apply-coupon", {
//                     method: "POST",
//                     headers: { "Content-Type": "application/json" },
//                     body: JSON.stringify({ couponcode: couponCode, totalAmount })
//                 });

//                 const result = await response.json();

//                 if (!result.success) {
//                     let alertType = "error";
//                     let title = "Error!";

//                     switch (result.type) {
//                         case "alreadyApplied":
//                             title = "Coupon Already Applied!";
//                             alertType = "warning";
//                             break;
//                         case "alreadyUsed":
//                             title = "Oops!";
//                             alertType = "warning";
//                             break;
//                         case "expired":
//                             title = "Expired!";
//                             alertType = "info";
//                             break;
//                         case "limitExceeded":
//                             title = "Limit Reached!";
//                             alertType = "warning";
//                             break;
//                         case "minOrderAmount":
//                             title = "Minimum Order Required!";
//                             alertType = "warning";
//                             break;
//                         default:
//                             break;
//                     }

//                     Swal.fire(title, result.message || "Invalid coupon code.", alertType);
//                     return;
//                 }

//                 Swal.fire("Success", `Coupon Applied! Discount: â‚¹${result.discountAmount}`, "success");

//                 document.getElementById("couponMessage").innerText = `Coupon Applied! Discount: â‚¹${result.discountAmount}`;
//                 document.getElementById("couponMessage").style.display = "block";
//                 document.getElementById("totalAmount").value = result.finalAmount;
//                 document.querySelector(".total-price span:last-child").innerText = `â‚¹${result.finalAmount.toLocaleString()}`;

                
//                 this.closest("li").remove();

                
//                 const couponModalEl = document.getElementById("couponModal");
//                 const couponModal = bootstrap.Modal.getInstance(couponModalEl);
//                 if (couponModal) couponModal.hide();

//             } catch (error) {
//                 console.error("Error applying coupon:", error);
//                 Swal.fire("Error", "Something went wrong! Please try again later.", "error");
//             }
//         });
//     });
// });

document.addEventListener("DOMContentLoaded", () => {
    const couponMessage = document.getElementById("couponMessage");
    const removeCouponBtn = document.getElementById("removeCouponBtn");

    document.querySelectorAll(".apply-coupon-btn").forEach(button => {
        button.addEventListener("click", async function () {
            const couponCode = this.getAttribute("data-code");

            if (!couponCode) {
                Swal.fire("Error", "Coupon code is missing.", "error");
                return;
            }

            const totalAmount = parseFloat(document.getElementById("totalAmount")?.value || 0);
            if (isNaN(totalAmount)) {
                Swal.fire("Error", "Invalid total amount.", "error");
                return;
            }

            try {
                const response = await fetch("/user/checkout/apply-coupon", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ couponcode: couponCode, totalAmount })
                });

                const result = await response.json();

                if (!result.success) {
                    let alertType = "error";
                    let title = "Error!";

                    switch (result.type) {
                        case "alreadyApplied":
                            title = "Coupon Already Applied!";
                            alertType = "warning";
                            break;
                        case "alreadyUsed":
                            title = "Oops!";
                            alertType = "warning";
                            break;
                        case "expired":
                            title = "Expired!";
                            alertType = "info";
                            break;
                        case "limitExceeded":
                            title = "Limit Reached!";
                            alertType = "warning";
                            break;
                        case "minOrderAmount":
                            title = "Minimum Order Required!";
                            alertType = "warning";
                            break;
                        default:
                            break;
                    }

                    Swal.fire(title, result.message || "Invalid coupon code.", alertType);
                    return;
                }

                Swal.fire("Success", `Coupon Applied! Discount: â‚¹${result.discountAmount}`, "success");

                couponMessage.innerText = `Coupon Applied! Discount: â‚¹${result.discountAmount}`;
                couponMessage.style.display = "block";
                document.getElementById("totalAmount").value = result.finalAmount;
                document.querySelector(".total-price span:last-child").innerText = `â‚¹${result.finalAmount.toLocaleString()}`;

                this.closest("li").remove();

                removeCouponBtn.classList.remove("d-none"); 

                const couponModalEl = document.getElementById("couponModal");
                const couponModal = bootstrap.Modal.getInstance(couponModalEl);
                if (couponModal) couponModal.hide();

            } catch (error) {
                console.error("Error applying coupon:", error);
                Swal.fire("Error", "Something went wrong! Please try again later.", "error");
            }
        });
    });

    document.getElementById("removeCouponBtn").addEventListener("click", async () => {
    try {
        const response = await fetch("/user/checkout/delete-coupon", { method: "DELETE" });
        const result = await response.json();

        if (result.success) {
            Swal.fire("Removed", result.message, "success");

            document.getElementById("couponMessage").innerText = "";

            const totalAmountElement = document.getElementById("totalAmount");
            
          
            const originalTotalAmount = parseFloat(totalAmountElement.getAttribute("data-original-amount") || "0");

            if (!isNaN(originalTotalAmount) && originalTotalAmount > 0) {
                totalAmountElement.value = originalTotalAmount;
                document.querySelector(".total-price span:last-child").innerText = `â‚¹${originalTotalAmount.toLocaleString()}`;
            } else {
                console.error("Error: originalTotalAmount is missing or invalid.");
            }
        } else {
            Swal.fire("Error", result.message, "error");
        }
    } catch (error) {
        console.error("Error removing coupon:", error);
        Swal.fire("Error", "Something went wrong!", "error");
    }
});

});

document.getElementById("addAddressForm").addEventListener("submit", async function (e) {
    e.preventDefault();

    const formData = new FormData(this);
    const addressData = Object.fromEntries(formData.entries());

    try {
        const response = await fetch("/user/address/add", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(addressData),
        });

        const data = await response.json();

        if (!data.success) {
            Swal.fire({
                icon: "error",
                title: "Validation Errors",
                html: `<ul style="text-align: left;">${data.errors.map(error => `<li>${error}</li>`).join('')}</ul>`,
                confirmButtonText: "OK"
            });
            return;
        }

        
        Swal.fire({
            icon: "success",
            title: "Address Added",
            text: "Your address has been saved successfully.",
            
            showConfirmButton: false
        }).then(() => {
          console.log(data.redirectUrl);
          
            window.location.href = data.redirectUrl;
            console.log(window.location.href);
            
        });

    } catch (error) {
        Swal.fire({
            icon: "error",
            title: "Server Error",
            text: "Something went wrong. Please try again later.",
            confirmButtonText: "OK"
        });
    }
});


  </script>

</body>
</html>
