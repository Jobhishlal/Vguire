<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Shopping Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <style>
        :root {
            --primary-color: #151ca4;
            --secondary-color: #2c3e50;
            --background-light: #f4f7f6;
            --text-muted: #6c757d;
        }

        body {
            background-color: var(--background-light);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }

        .cart-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            padding: 2.5rem;
            margin-top: 3rem;
            border: 1px solid #e9ecef;
        }

        .cart-item {
            display: flex;
            align-items: center;
            padding: 1.5rem;
            background-color: white;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .cart-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .cart-item img {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 12px;
            margin-right: 1.5rem;
            transition: transform 0.3s ease;
        }

        .cart-item img:hover {
            transform: scale(1.05);
        }

        .cart-item-details h5 {
            font-weight: 600;
            color: var(--secondary-color);
            margin-bottom: 0.75rem;
        }

        .cart-item-details p {
            color: var(--text-muted);
            margin-bottom: 0.5rem;
        }

        .update-quantity-form {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .update-quantity-form input {
            width: 80px;
            padding: 0.25rem 0.5rem;
            text-align: center;
        }

        .cart-item-total {
            font-weight: 700;
            color: var(--primary-color);
            font-size: 1.2rem;
        }

        .cart-total {
            background-color: #f8f9fa;
            border-radius: 12px;
            padding: 1.5rem;
            margin-top: 2rem;
            text-align: right;
        }

        .btn-checkout {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-checkout:hover {
            background-color: #3a7bd5;
            transform: translateY(-3px);
            box-shadow: 0 4px 15px rgba(74, 144, 226, 0.3);
        }

        .empty-cart {
            text-align: center;
            padding: 4rem;
            background-color: #f8f9fa;
            border-radius: 16px;
        }

        .empty-cart i {
            font-size: 4rem;
            color: var(--primary-color);
            margin-bottom: 1.5rem;
        }

        @media (max-width: 768px) {
            .cart-item {
                flex-direction: column;
                text-align: center;
            }

            .cart-item img {
                margin-bottom: 1rem;
                margin-right: 0;
            }

            .cart-total {
                text-align: center;
            }
            
        }

        .navbar {
    padding: 1rem;
    background: white;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.navbar-brand img {
    width: 60px;
    margin-right: 50px;
}

@media (max-width: 992px) {
    .navbar-brand img {
        margin-right: 0;
    }
    
    .nav-link {
        padding: 0.5rem 0;
        border-bottom: 1px solid #eee;
    }

    .navbar .d-flex {
        margin-top: 1rem;
        justify-content: center;
    }
}

.nav-link {
    color: var(--primary-color);
    margin: 0 1rem;
    position: relative;
}

.nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: var(--secondary-color);
    transition: width 0.3s ease;
}

.nav-link:hover::after {
    width: 100%;
}

.login-btn {
    background: var(--secondary-color);
    color: white;
    padding: 0.5rem 1.5rem;
    border-radius: 25px;
    transition: all 0.3s ease;
    text-decoration: none;
}

.login-btn:hover {
    background: #ff2e43;
    color: white;
    transform: translateY(-2px);
}

.footer {
    background-color: rgba(0, 0, 0, 0.847);
    color: white;
    padding: 4rem 0 2rem;
}

@media (max-width: 768px) {
    .footer {
        padding: 2rem 0 1rem;
        text-align: center;
    }
    
    .footer .col-md-4 {
        margin-bottom: 2rem;
    }
}

.footer-links {
    list-style: none;
    padding: 0;
}

.footer-links li {
    margin-bottom: 1rem;
}

.footer-links a {
    color: white;
    text-decoration: none;
    transition: color 0.3s ease;
}

.footer-links a:hover {
    color: var(--secondary-color);
}



.quantity-controls {
    display: flex;
    align-items: center;
    gap: 5px;
}

.quantity-input {
    width: 50px;
    text-align: center;
    font-weight: bold;
}



        
    </style>
</head>
<body>

    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
            <a class="navbar-brand" href="#">
                <img src="/image/Screenshot 2025-01-02 185508.png" alt="Logo">
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/user/home">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/user/shop">Shop</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">About</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Contact</a>
                    </li>
                    <li class="nav-item">   
                        <a class="nav-link" href="/user/profile">Profile</a>
                    </li>
                </ul>
                <div class="d-flex align-items-center">
                    <a href="#" class="login-btn me-3">Login</a>
                    <a href="#" class="me-3"><i class="fas fa-search"></i></a>
                    <a href="#" class="me-3"><i class="fas fa-shopping-cart"></i></a>
                    <a href="#"><i class="fas fa-heart"></i></a>
                </div>
            </div>
        </div>
    </nav>


    <div class="container py-4">
        <div class="cart-container">
            <h2 class="mb-4 text-center">Your Shopping Cart</h2>
    
            <% if (!cart || cart.length === 0) { %>
                <div class="empty-cart text-center">
                    <i class="fas fa-shopping-basket fa-3x text-muted"></i>
                    <h4 class="mt-3">Your cart is empty</h4>
                    <p class="text-muted">Explore our products and add some items!</p>
                    <a href="/user/shop" class="btn btn-primary mt-3">Continue Shopping</a>
                </div>
            <% } else { %>
                <div class="cart-items">
                    <% cart.forEach(item => { %>
                        <div class="cart-item d-flex align-items-center p-3 shadow-sm rounded mb-3 bg-white">
                            <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>"
                                class="rounded cart-item-img">
    
                            <div class="cart-item-details flex-grow-1 ps-3">
                                <h5 class="mb-1"><%= item.product.name %></h5>
                                <p class="mb-1 text-muted">Size: <%= item.size.replace('size', '') %></p>
                                <p class="fw-bold">₹<%= item.product.price %></p>
    
                                <div class="d-flex align-items-center">
                                  
                                   
                                    <div class="quantity-controls" 
                                    data-item-id="<%= item._id %>"
                                    data-stock="<%= item.product[`size${item.size}`] %>"> <!-- Pass stock for selected size -->
                               
                                   <button type="button" class="btn btn-sm btn-outline-secondary"
                                       onclick="changeQuantity(this, -1, 5)">−</button>
                               
                                   <input type="number" name="quantity" value="<%=item.quantity%>" min="1" max="5"
                                       class="form-control form-control-sm quantity-input" data-price="<%= item.price %>" readonly>
                               
                                   <button type="button" class="btn btn-sm btn-outline-secondary"
                                       onclick="changeQuantity(this, 1, 5)">+</button>
                               </div>
                               
                                    
                                        
                                    
                                    
                                    <span class="item-total ms-3 fw-bold">₹<%= item.quantity * item.product.price %></span>
                                </div>
                            </div>
    
                            </div>
    
                            <!-- Remove Item Button -->
                            <form action="/user/remove-from-cart/<%= item._id %>" method="POST">
                                <button type="submit" class="btn btn-sm btn-danger ms-3">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </form>
                        </div>
                    <% }) %>
                </div>
    
                <!-- Cart Total -->
                <div class="cart-total p-3 rounded bg-light shadow-sm mt-3 text-center">
                    <h4>Total: <span id="cart-total"><%= totalPrice %></span></h4>
                </div>
    
                <!-- Checkout Button -->
                <div class="text-center mt-4">
                    <form action="/user/checkout/buy-now-cart" method="get">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-shopping-cart me-2"></i>Proceed to Checkout
                        </button>
                    </form>
                </div>
            <% } %>
        </div>
   
    

    <footer class="footer" style="display: block;">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <h4>About Us</h4>
                    <p>We are committed to providing the best products and services to our customers.</p>
                </div>
                <div class="col-md-4">
                    <h4>Quick Links</h4>
                    <ul class="footer-links">
                        <li><a href="#">Home</a></li>
                        <li><a href="#">Shop</a></li>
                        <li><a href="#">About</a></li>
                        <li><a href="#">Contact</a></li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <h4>Contact Us</h4>
                    <ul class="footer-links">
                        <li><i class="fas fa-phone me-2"></i> +1 234 567 890</li>
                        <li><i class="fas fa-envelope me-2"></i> info@example.com</li>
                        <li><i class="fas fa-map-marker-alt me-2"></i> 123 Street, City, Country</li>
                    </ul>
                </div>
            </div>
            <div class="text-center mt-4">
                <p>&copy; 2025 Your Company. All rights reserved.</p>
            </div>
        </div>
    </footer>




    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
//   function changeQuantity(button, change, maxStock) {
//     let cartItem = button.closest(".cart-item");
//     let input = button.parentElement.querySelector(".quantity-input");
//     let totalElement = cartItem.querySelector(".item-total");
//     let cartTotalElement = document.getElementById("cart-total");

//     let itemId = button.closest(".quantity-controls").getAttribute("data-item-id");
//     let price = parseFloat(input.getAttribute("data-price")); 

//     console.log("Item Price:", price, "| Element:", input);
//     if (isNaN(price)) {
//         console.warn("Warning: Price is NaN. Setting it to 0.");
//         price = 0;
//     }

//     let value = parseInt(input.value) || 1;
//     let newValue = value + change;

//     if (newValue < 1) {
//         newValue = 1;
//     } else if (newValue > Math.min(5, maxStock)) {
//         newValue = Math.min(5, maxStock);
//         Swal.fire({
//             title: "Limit Reached!",
//             text: `You can only add up to ${Math.min(5, maxStock)} items per product.`,
//             icon: "warning",
//             confirmButtonColor: "#d33",
//             confirmButtonText: "OK"
//         });
//     }

//     input.value = newValue;
//     totalElement.textContent = `₹${(newValue * price).toFixed(2)}`; 

//     // ✅ Update total dynamically
//     let allItemsTotal = Array.from(document.querySelectorAll(".item-total"))
//         .map(el => parseFloat(el.textContent.replace("₹", "")) || 0) 
//         .reduce((acc, curr) => acc + curr, 0);

//     cartTotalElement.textContent = `₹${allItemsTotal.toFixed(2)}`;

//     console.log("Sending itemId:", itemId, "| New Quantity:", newValue);

//     // 🔥 Send AJAX request to update quantity in database
//     fetch("/user/update-cart-quantity", {
//         method: "POST",
//         headers: {
//             "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ itemId, quantity: newValue })
//     })
//     .then(response => response.json()) 
  
//     .catch(error => {
//         console.error("Network Error:", error);
//         Swal.fire("Error!", "Network error! Please try again.", "error");
//     });
// // }

// function changeQuantity(button, change, maxStock) {
//     let cartItem = button.closest(".cart-item");
//     let input = button.parentElement.querySelector(".quantity-input");
//     let totalElement = cartItem.querySelector(".item-total");
//     let cartTotalElement = document.getElementById("cart-total");
//     console.log("total element",totalElement);
//    console.log("input",);
   
    
    

//     let itemId = button.closest(".quantity-controls").getAttribute("data-item-id");
//     let price = parseFloat(input.getAttribute("data-price")); 

//     console.log("Item Price:", price, "| Element:", input);
//     if (isNaN(price)) {
//         console.warn("Warning: Price is NaN. Setting it to 0.");
//         price = 0;
//     }

//     let value = parseInt(input.value) || 1;
//     let newValue = value + change;

//     if (newValue < 1) {
//         newValue = 1;
//     } else if (newValue > Math.min(5, maxStock)) {
//         newValue = Math.min(5, maxStock);
        
        
//         Swal.fire({
//             title: "Stock Limit Reached!",
//             text: `Only 5 items available in stock.`,
//             icon: "error",
//             confirmButtonColor: "#d33",
//             confirmButtonText: "OK"
//         });
//     }

//     input.value = newValue;
//     totalElement.textContent = `₹${(newValue * price).toFixed(2)}`;

//     let allItemsTotal = Array.from(document.querySelectorAll(".item-total"))
//         .map(el => parseFloat(el.textContent.replace("₹", "")) || 0)
//         .reduce((acc, curr) => acc + curr, 0);

//     cartTotalElement.textContent = `₹${allItemsTotal.toFixed(2)}`;

//     console.log("Sending itemId:", itemId, "| New Quantity:", newValue);

//     fetch("/user/update-cart-quantity", {
//         method: "POST",
//         headers: {
//             "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ itemId, quantity: newValue })
//     })
//     .then(response => response.json()) 
//     .catch(error => {
//         console.error("Network Error:", error);
//         Swal.fire("Error!", "Network error! Please try again.", "error");
//     });
// }

function changeQuantity(button, change, maxStock) {
    let cartItem = button.closest(".cart-item");
    let input = button.parentElement.querySelector(".quantity-input");
    let totalElement = cartItem.querySelector(".item-total");
    let cartTotalElement = document.getElementById("cart-total");

    let itemId = button.closest(".quantity-controls").getAttribute("data-item-id");
    let price = parseFloat(input.getAttribute("data-price")); 
    let stock = parseInt(button.closest(".quantity-controls").getAttribute("data-stock")); // Fetch actual stock

    let value = parseInt(input.value) || 1;
    let newValue = value + change;

    if (newValue < 1) {
        newValue = 1;
    } else if (newValue > stock) {
        newValue = stock;
        Swal.fire({
            title: "Stock Limit Reached!",
            text: `Only ${stock} items available in stock.`,
            icon: "warning",
            confirmButtonColor: "#d33",
            confirmButtonText: "OK"
        });
    } else if (newValue > maxStock) {
        newValue = maxStock;
        Swal.fire({
            title: "Max Order Limit!",
            text: `You can only order up to ${maxStock} items per purchase.`,
            icon: "warning",
            confirmButtonColor: "#d33",
            confirmButtonText: "OK"
        });
    }

    input.value = newValue;
    totalElement.textContent = `₹${(newValue * price).toFixed(2)}`;

    let allItemsTotal = Array.from(document.querySelectorAll(".item-total"))
        .map(el => parseFloat(el.textContent.replace("₹", "")) || 0)
        .reduce((acc, curr) => acc + curr, 0);

    cartTotalElement.textContent = `₹${allItemsTotal.toFixed(2)}`;

    console.log("Sending itemId:", itemId, "| New Quantity:", newValue);

    fetch("/user/update-cart-quantity", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ itemId, quantity: newValue })
    })
    .then(response => response.json()) 
    .catch(error => {
        console.error("Network Error:", error);
        Swal.fire("Error!", "Network error! Please try again.", "error");
    });
}




    </script>
</body>
</html>