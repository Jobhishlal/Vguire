<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #2563eb;
            --secondary: #4f46e5;
            --success: #16a34a;
            --warning: #ca8a04;
            --danger: #dc2626;
            --light-bg: #f9fafb;
            --border-color: #e5e7eb;
        }

        body {
            background-color: var(--light-bg);
            font-family: 'Inter', sans-serif;
        }

        .navbar {
    padding: 1rem;
    background: white;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.navbar-brand img {
    width: 60px;
    margin-right: 50px;
}

@media (max-width: 992px) {
    .navbar-brand img {
        margin-right: 0;
    }
    
    .nav-link {
        padding: 0.5rem 0;
        border-bottom: 1px solid #eee;
    }

    .navbar .d-flex {
        margin-top: 1rem;
        justify-content: center;
    }
}

.nav-link {
    color: var(--primary-color);
    margin: 0 1rem;
    position: relative;
}

.nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: red;
    transition: width 0.3s ease;
}

.nav-link:hover::after {
    width: 100%;
}

.login-btn {
    background: var(--secondary-color);
    color: white;
    padding: 0.5rem 1.5rem;
    border-radius: 25px;
    transition: all 0.3s ease;
    text-decoration: none;
}

.login-btn:hover {
    background: #ff2e43;
    color: white;
    transform: translateY(-2px);
}


        .order-container {
            max-width: 1000px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .order-header {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }

        .order-status {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-weight: 500;
            font-size: 0.875rem;
        }

        .progress-tracker {
    background: white;
    border-radius: 15px;
    padding: 2rem;
    margin: 2rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.steps-container {
    display: flex;
    justify-content: space-between;
    position: relative;
    margin-bottom: 2rem;
}

/* Progress Line */
.steps-container::before {
    content: '';
    position: absolute;
    top: 30px;
    left: 0;
    right: 0;
    height: 3px;
    background: #e5e7eb;
    z-index: 1;
}

/* Active Progress Line */
.steps-container::after {
    content: '';
    position: absolute;
    top: 30px;
    left: 0;
    height: 3px;
    background: #4f46e5;
    z-index: 1;
    transition: width 0.5s ease;
}

/* Modify width based on status */
.steps-container[data-status="Pending"]::after { width: 25%; }
.steps-container[data-status="Processing"]::after { width: 50%; }
.steps-container[data-status="Shipped"]::after { width: 75%; }
.steps-container[data-status="Delivered"]::after { width: 100%; }

.step {
    flex: 1;
    text-align: center;
    position: relative;
    z-index: 2;
}

.step-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: white;
    border: 3px solid #e5e7eb;
    margin: 0 auto 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    color: #9ca3af;
    transition: all 0.3s ease;
}

.step.active .step-icon {
    border-color: #4f46e5;
    background: #4f46e5;
    color: white;
    transform: scale(1.1);
    box-shadow: 0 0 15px rgba(79, 70, 229, 0.3);
}

.step.completed .step-icon {
    border-color: #10b981;
    background: #10b981;
    color: white;
}

.step-title {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #374151;
}

.step-info {
    font-size: 0.875rem;
    color: #6b7280;
    max-width: 150px;
    margin: 0 auto;
}

/* Status badges */
.status-badge {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-weight: 500;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all 0.3s ease;
}

.status-badge.pending {
    background: linear-gradient(135deg, #fef3c7, #fbbf24);
    color: #92400e;
}

.status-badge.processing {
    background: linear-gradient(135deg, #dbeafe, #3b82f6);
    color: #1e40af;
}

.status-badge.shipped {
    background: linear-gradient(135deg, #e0e7ff, #6366f1);
    color: #3730a3;
}

.status-badge.delivered {
    background: linear-gradient(135deg, #dcfce7, #22c55e);
    color: #166534;
}

.status-badge.cancelled {
    background: linear-gradient(135deg, #fee2e2, #ef4444);
    color: #991b1b;
}
        .product-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }

        .product-card:hover {
            transform: translateY(-2px);
        }

        .product-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
        }

        .address-card, .payment-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .price-tag {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--primary);
        }

        .btn-cancel {
            background: #fee2e2;
            color: #991b1b;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn-cancel:hover {
            background: #fecaca;
        }

        .footer {
            background: #1f2937;
            color: white;
            padding: 4rem 0;
            margin-top: 4rem;
        }

        .footer-links {
            list-style: none;
            padding: 0;
        }

        .footer-links li a {
            color: #9ca3af;
            text-decoration: none;
            transition: color 0.2s;
        }

        .footer-links li a:hover {
            color: white;
        }

        .rating-form select {
            padding: 0.5rem;
            border-radius: 6px;
            border: 1px solid var(--border-color);
        }

        .btn-rate {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn-rate:hover {
            background: var(--secondary);
        }

        @media (max-width: 768px) {
            .product-card {
                flex-direction: column;
                text-align: center;
            }

            .product-image {
                margin-bottom: 1rem;
                margin-right: 0;
            }
        }

     


        .payment-container {
    max-height: 500px;
    overflow-y: auto;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 10px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.section-title {
    font-size: 20px;
    font-weight: bold;
    color: #333;
    margin-bottom: 15px;
    border-bottom: 2px solid #007bff;
    padding-bottom: 5px;
}

.payment-info p {
    font-size: 16px;
    color: #555;
    margin-bottom: 5px;
}

.border-top {
    border-top: 2px dashed #ddd !important;
    padding-top: 10px;
}

.border-top p {
    font-size: 16px;
    color: #333;
}

.text-danger {
    color: #dc3545 !important;
}

.h5 {
    font-size: 18px;
    font-weight: bold;
    color: #007bff;
}

@media (max-width: 768px) {
    .payment-container {
        padding: 10px;
    }

    .section-title {
        font-size: 18px;
    }

    .payment-info p,
    .border-top p {
        font-size: 14px;
    }

    .h5 {
        font-size: 16px;
    }
}

/* Final Total */
.final-total {
    font-size: 20px;
    font-weight: bold;
    color: #007bff;
    text-align: center;
    margin-top: 10px;
}
.breadcrumb {
    list-style: none;
    display: flex;
    gap: 8px;
    font-size: 14px;
    padding: 10px 0;
}

.breadcrumb li {
    display: flex;
    align-items: center;
}

.breadcrumb li a {
    text-decoration: none;
    color: #007bff; /* Blue color */
    font-weight: 500;
    transition: color 0.3s ease-in-out;
}

.breadcrumb li a:hover {
    color: #0056b3; /* Darker blue on hover */
}

.breadcrumb li::after {
    content: "›"; /* Breadcrumb separator */
    margin: 0 8px;
    color: #666;
}

.breadcrumb li:last-child::after {
    content: ""; /* Remove separator from last item */
}



    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
            <a class="navbar-brand" href="#">
                <img src="/image/Screenshot 2025-01-02 185508.png" alt="Logo">
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/user/home">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/user/shop">Shop</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">About</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Contact</a>
                    </li>
                    <li class="nav-item">   
                        <a class="nav-link" href="#">Profile</a>
                    </li>
                </ul>
                <div class="d-flex align-items-center">
                    
                    <a href="#" class="me-3"><i class="fas fa-search"></i></a>
                    <a href="#" class="me-3"><i class="fas fa-shopping-cart"></i></a>
                    <a href="#"><i class="fas fa-heart"></i></a>
                </div>
            </div>
        </div>
    </nav>
    <div class="container" style="margin-top: 100px;">
        <ul class="breadcrumb">
            <% breadcrumbs.forEach(breadcrumb => { %>
                <li>
                    <a href="<%= breadcrumb.url %>"><%= breadcrumb.name %></a>
                </li>
            <% }) %>
        </ul>
        
    </div> 

    <div class="order-container" style="margin-top: 30px;">
        <div class="order-header">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h1 class="h3 mb-0">Order #<%= order._id %></h1>
                <span class="order-status status-<%= order.status.toLowerCase() %>">
                    <%= order.status %>
                </span>
            </div>
            <p class="text-gray-600 mb-0">order Date: <%= order.createdAt.toDateString() %></p>
            <% 
            let hasActiveItems = order.items.some(item => item.status !== "Cancelled" && item.status !== "Returned"); 
        %>
        
        <% if (hasActiveItems) { %>
            <p style="color: rgb(7, 147, 9); margin-bottom: 0;">
                Product Delivery Date: <%= order.deliveryDate.toDateString() %>
            </p>
        <% } %>
        

        </div>

        <div class="progress-tracker">
            <div class="steps-container" data-status="<%= order.status %>">
                
                <!-- Order Placed -->
                <div class="step <%= ['Pending', 'Processing', 'Shipped', 'Delivered'].includes(order.status) ? 'active' : '' %> <%= ['Processing', 'Shipped', 'Delivered'].includes(order.status) ? 'completed' : '' %>">
                    <div class="step-icon">
                        <i class="fas fa-box"></i>
                    </div>
                    <div class="step-title">Order Placed</div>
                    <div class="step-info">We've received your order</div>
                </div>
        
                <!-- Processing -->
                <div class="step <%= ['Processing', 'Shipped', 'Delivered'].includes(order.status) ? 'active' : '' %> <%= ['Shipped', 'Delivered'].includes(order.status) ? 'completed' : '' %>">
                    <div class="step-icon">
                        <i class="fas fa-cog"></i>
                    </div>
                    <div class="step-title">Processing</div>
                    <div class="step-info">Preparing your items</div>
                </div>
        
                <!-- Shipped -->
                <div class="step <%= ['Shipped', 'Delivered'].includes(order.status) ? 'active' : '' %> <%= order.status === 'Delivered' ? 'completed' : '' %>">
                    <div class="step-icon">
                        <i class="fas fa-truck"></i>
                    </div>
                    <div class="step-title">Shipped</div>
                    <div class="step-info">On the way to you</div>
                </div>
        
                <!-- Delivered -->
                <div class="step <%= order.status === 'Delivered' ? 'active completed' : '' %>">
                    <div class="step-icon">
                        <i class="fas fa-check"></i>
                    </div>
                    <div class="step-title">Delivered</div>
                    <div class="step-info">Package received</div>
                </div>
        
                <!-- Cancelled -->
                <% if (order.status === 'Cancelled') { %>
                <div class="step active cancelled">
                    <div class="step-icon">
                        <i class="fas fa-times-circle text-danger"></i>
                    </div>
                    <div class="step-title text-danger">Cancelled</div>
                    <div class="step-info">Your order was cancelled</div>
                </div>
                <% } %>
        
                <!-- Returned -->
                <% if (order.status === 'Returned') { %>
                <div class="step active returned">
                    <div class="step-icon">
                        <i class="fas fa-undo-alt text-warning"></i>
                    </div>
                    <div class="step-title text-warning">Returned</div>
                    <div class="step-info">Your order was returned</div>
                </div>
                <% } %>
        
            </div>
        
            <!-- Order Status Badge -->
            <div class="text-center mt-4">
                <span class="status-badge <%= order.status.toLowerCase() %>">
                    <%= order.status %>
                </span>
            </div>
        </div>

        <% if (
            order.status === "Delivered" || 
            (order.paymentMethod && 
            (order.paymentMethod.toLowerCase() === "upi" || 
            order.paymentMethod.toLowerCase() === "wallet"))
        ) { %>
            <a href="/user/order-view/<%= order._id %>?invoice=true" class="btn btn-primary">
                Download Invoice
            </a>
        <% } %>
        
        
        
        <h3 class="mb-4">Order Items</h3>
        <% order.items.forEach(item => { %>
            <div class="product-card">
                <div class="d-flex align-items-center">
                    <% if (item.productId && item.productId.images.length > 0) { %>
                        <img src="<%= item.productId.images[0] %>" alt="Product" class="product-image me-4">
                    <% } %>
                    <div class="flex-grow-1">
                        <h4 class="mb-2"><%= item.productId ? item.productId.name : 'Product Not Available' %></h4>
                        <p class="mb-2">Size: <%= item.size %> | Quantity: <%= item.quantity %></p>
                        <p class="price-tag mb-0">₹<%= item.totalprice %></p>
                        <p class="text-muted status-text">Status: <%= item.status ? item.status : "Pending" %></p>
                    </div>
                
                    <% if (item.status !== "Shipped" && item.status !== "Delivered" && item.status !== "Cancelled" && order.status !== "Delivered") { %>
                
                        <!-- Show Cancel Button -->
                        <td>
                            <button class="btn btn-danger cancel-btn" 
                                    data-order-id="<%= order._id %>" 
                                    data-product-id="<%= item.productId._id %>">
                                Cancel
                            </button>
                        </td>
                
                    <% } else if (order.status === "Delivered" && item.status !== "Cancelled" && !item.returnRequested) { %>
                
                        <!-- Show Return Button -->
                        <td>
                            <button class="btn btn-warning return-btn" 
                                    data-order-id="<%= order._id %>" 
                                    data-product-id="<%= item.productId._id %>">
                                Return
                            </button>
                        </td>
                
                    <% } else if (item.status === "Cancelled") { %>
                
                        <!-- Show Cancelled Status -->
                        <td><span class="text-danger">Cancelled</span></td>
                
                    <% } else if (item.returnStatus === "Rejected") { %>
                
                        <!-- Show Rejected Return Status and Reason -->
                        <td>
                            <span class="text-danger">Return Rejected</span>
                           
                        </td>
                
                    <% } else { %>
                
                        <!-- Show Returned Status -->
                        <td><span class="text-muted">Returned</span></td>
                
                    <% } %>
                </div>
                
                
                <!-- Rating Section -->
                <% if (order.status === "Delivered" && !item.rating) { %>
                    <div class="mt-3 pt-3 border-top">
                        <form class="rating-form d-flex align-items-center gap-3" data-order="<%= order._id %>" data-product="<%= item.productId._id %>">
                            <label class="mb-0">Rate this product:</label>
                            <select name="rating" class="form-select w-auto" required>
                                <option value="">Select rating</option>
                                <option value="1">⭐</option>
                                <option value="2">⭐⭐</option>
                                <option value="3">⭐⭐⭐</option>
                                <option value="4">⭐⭐⭐⭐</option>
                                <option value="5">⭐⭐⭐⭐⭐</option>
                            </select>
                            <button type="submit" class="btn-rate">Submit Rating</button>
                        </form>
                    </div>
                <% } else if (item.rating) { %>
                    <div class="mt-3 pt-3 border-top">
                        <p class="mb-0 text-success">
                            <i class="fas fa-star text-warning me-2"></i>
                            Rated: <%= item.rating %>/5
                        </p>
                    </div>
                <% } %>
            </div>
        <% }); %>

        <div class="row mt-4">
            <!-- Left Side: Address Section -->
            <div class="col-md-6">
                <div class="address-card">
                    <h4 class="mb-3">Delivery Address</h4>
                    <% if (order.addressId) { %>
                        <p class="mb-1"><strong><%= order.addressId.fullName %></strong></p>
                        <p class="mb-1"><%= order.addressId.streetAddress %></p>
                        <p class="mb-1"><%= order.addressId.city %>, <%= order.addressId.state %></p>
                        <p class="mb-1"><%= order.addressId.pincode %></p>
                        <p class="mb-0">📞 <%= order.addressId.phone %></p>
                    <% } %>
                </div>
            </div>
        
           <!-- Right Side: Order Details (Scrollable) -->
           <div class="col-md-6">
            <div class="payment-container" style="max-height: 500px; overflow-y: auto; padding: 15px; border: 1px solid #ddd; border-radius: 10px;">
                <h2 class="section-title">Order Details</h2>
        
                <!-- Payment Info -->
                <div class="payment-info">
                    <p><strong>Payment Method:</strong> <%= order.paymentMethod || 'N/A' %></p>
                    <p><strong>Payment Status:</strong> <span id="payment-status"><%= order.paymentStatus || 'N/A' %></span></p>
                    <p><strong>Delivery Date:</strong> <%= order.deliveryDate || 'N/A' %></p>
                </div>
        
                <!-- Order Items -->
                <!-- Add your order items display logic here -->
        
                <!-- Total Calculation Section -->
                <div class="border-top pt-2 mt-3">
                    <% if (order.couponDetails && order.couponDetails.discountAmount !== undefined) { %>
                        <p class="mb-2"><strong>Coupon Discount:</strong> -₹<%= (order.couponDetails.value || 0).toFixed(2) %></p>
                    <% } %>
        
                    <% if ((order.refundedAmount || 0) > 0) { %>
                        <p class="mb-2 text-danger"><strong>Refunded Amount:</strong> -₹<%= (order.refundedAmount || 0).toFixed(2) %></p>
                    <% } %>
        
                    <p class="mb-2"><strong>Shipping:</strong> Free</p>
                    <p class="h5 mb-0"><strong>Total Payable:</strong> ₹<%= (order.totalAmount || 0).toFixed(2) %></p>
                </div>
        
                <!-- Pay Now Button -->
                <% if (order.paymentMethod === "UPI" && order.paymentStatus === "Pending") { %>
                    <button id="pay-btn" class="btn btn-primary mt-3">Pay Now</button>
                <% } %>
                
            </div>
        </div>
        
        
        
        
  
            
        </div>
  
        <% if (order.status !== "Cancelled" && order.status !== "Shipped" && order.status !== "Delivered" && order.status!=="Returned") { %>
            <button id="cancelOrderBtn" data-order-id="<%= order._id %>" 
                style="background-color: #dc3545; color: #fff; border: none; padding: 8px 14px; 
                       border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: bold; 
                       transition: background 0.3s;">
                Cancel Order
            </button>
        <% } else if (order.status === "Delivered" && !order.returnRequested && !order.items.returnRequested ) { %>
            <button class="returnOrderBtn" data-order-id="<%= order._id %>" 
                style="background-color: #ffc107; color: #000; border: none; padding: 8px 14px; 
                       border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: bold; 
                       transition: background 0.3s;">
                Return Order
            </button>
            
        <% } else { %>
            <p style="color: #6c757d; font-weight: bold;">Order cannot be cancelled as it is already <%= order.status %>.</p>
        <% } %>
        
      
     
        
      

        <div class="text-center mt-4">
            <a href="/user/order-details" class="btn btn-primary px-4">
                <i class="fas fa-arrow-left me-2"></i>Back to Orders
            </a>
        </div>
    </div>


  

    <footer class="footer" style="display: block;">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <h4>About Us</h4>
                    <p>We are committed to providing the best products and services to our customers.</p>
                </div>
                <div class="col-md-4">
                    <h4>Quick Links</h4>
                    <ul class="footer-links">
                        <li><a href="#">Home</a></li>
                        <li><a href="#">Shop</a></li>
                        <li><a href="#">About</a></li>
                        <li><a href="#">Contact</a></li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <h4>Contact Us</h4>
                    <ul class="footer-links">
                        <li><i class="fas fa-phone me-2"></i> +1 234 567 890</li>
                        <li><i class="fas fa-envelope me-2"></i> info@example.com</li>
                        <li><i class="fas fa-map-marker-alt me-2"></i> 123 Street, City, Country</li>
                    </ul>
                </div>
            </div>
            <div class="text-center mt-4">
                <p>&copy; 2025 Your Company. All rights reserved.</p>
            </div>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
   


     
        document.addEventListener("DOMContentLoaded", function () {
    console.log(" DOM fully loaded");

   
    document.querySelector("#cancelOrderBtn")?.addEventListener("click", async function () {
        const orderId = this.dataset.orderId;
        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to cancel the entire order?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, cancel it!",
            cancelButtonText: "No, keep it"
        }).then(async (result) => {
            if (!result.isConfirmed) return;
            try {
                const response = await fetch("/user/order/order-cancel", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orderId })
                });
                const data = await response.json();
                if (response.ok) {
                    Swal.fire("Cancelled!", data.message, "success").then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire("Error!", data.message, "error");
                }
            } catch (error) {
                console.error("Cancel Order Error:", error);
                Swal.fire("Error!", "Something went wrong. Try again!", "error");
            }
        });
    });

    
    document.querySelectorAll(".cancel-btn").forEach(button => {
        button.addEventListener("click", function () {
            const orderId = this.dataset.orderId;
            const productId = this.dataset.productId;
            Swal.fire({
                title: "Enter Cancellation Reason",
                input: "text",
                inputPlaceholder: "Enter reason...",
                showCancelButton: true,
                confirmButtonText: "Submit",
                cancelButtonText: "Cancel",
                inputValidator: (value) => {
                    if (!value) return "You must enter a reason!";
                }
            }).then((result) => {
                if (!result.isConfirmed) return;
                const reason = result.value;
                fetch("/user/order/cancel-product", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orderId, productId, reason })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        Swal.fire({ icon: "success", title: "Cancelled", text: data.message });
                       
                        this.parentElement.innerHTML = `<span class="text-danger">Cancelled</span>`;

                    } else {
                        Swal.fire({ icon: "error", title: "Error", text: "Error cancelling product" });
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    Swal.fire({ icon: "error", title: "Error", text: "Something went wrong. Try again!" });
                });
            });
        });
    });


    document.body.addEventListener("click", function (event) {
    if (event.target.classList.contains("returnOrderBtn")) {
        const orderId = event.target.getAttribute("data-order-id");

       
        Swal.fire({
            title: "Return Order",
            input: "text",
            inputPlaceholder: "Enter the reason for returning the order",
            showCancelButton: true,
            confirmButtonText: "Submit",
            cancelButtonText: "Cancel",
            inputValidator: (value) => {
                if (!value) {
                    return "Return reason is required!";
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const reason = result.value;

                fetch("/user/order/returnfullorder", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orderId, reason }),
                })
                .then(async (res) => {
                    if (!res.ok) {
                        const text = await res.text();
                        console.error("Server Error:", text);
                        throw new Error(`Server responded with ${res.status}: ${text}`);
                    }
                    return res.json();
                })
                .then((data) => {
                    if (data.success) {
                        Swal.fire("Success!", "Full order return request submitted!", "success")
                            .then(() => location.reload());
                    } else {
                        Swal.fire("Error!", data.message, "error");
                    }
                })
                .catch(err => {
                    console.error("Fetch error:", err);
                    Swal.fire("Error!", "Something went wrong. Please try again later.", "error");
                });
            }
        });
    }
});


    
    document.querySelectorAll(".rating-form").forEach(form => {
        form.addEventListener("submit", async function (e) {
            e.preventDefault();
            const orderId = this.getAttribute("data-order");  
            const productId = this.getAttribute("data-product"); 
            const rating = this.querySelector("select[name='rating']").value;

            console.log(" Debugging values:", { orderId, productId, rating }); 

            if (!orderId || !productId) {
                console.error(" Order ID or Product ID is missing!");
                return;
            }

            try {
                const response = await fetch("/user/order/rate-product", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ orderId, productId, rating })
                });

                if (!response.ok) {
                    const text = await response.text();
                    throw new Error(`Server error: ${text}`);
                }

                const result = await response.json();
                console.log(result);

                Swal.fire("Success!", "Your rating has been submitted!", "success").then(() => {
                    window.location.reload();
                });
            } catch (error) {
                console.error("Fetch Error:", error);
            }
        });
    });

    document.querySelectorAll(".return-btn").forEach(button => {
    button.addEventListener("click", async function () {
        const orderId = this.getAttribute("data-order-id");
        const productId = this.getAttribute("data-product-id");

        // Show Swal modal to get return reason
        const { value: reason } = await Swal.fire({
            title: "Return Product",
            input: "text",
            inputPlaceholder: "Enter return reason",
            showCancelButton: true,
            confirmButtonText: "Submit",
            cancelButtonText: "Cancel",
            inputValidator: (value) => {
                if (!value) {
                    return "Return reason is required!";
                }
            }
        });

        if (!reason) return; 

        try {
            const response = await fetch("/user/order/returnorder", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId, productId, reason })
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire("Success!", result.message, "success");
                this.style.display = "none"; 
            } else {
                Swal.fire("Error!", result.message, "error");
            }
        } catch (error) {
            console.error("Return request error:", error);
            Swal.fire("Error!", "Something went wrong. Please try again later.", "error");
        }
    });
});
document.getElementById("pay-btn").addEventListener("click", async function () {
                try {
                    const orderId = "<%= order._id %>"; // Ensure this is correctly passed from your backend

                    const response = await fetch("/user/order/create-razorpay-order", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ orderId })
                    });

                    if (!response.ok) {
                        const errorData = await response.text();
                        console.error("Server Error:", errorData);
                        return alert("Error: " + errorData);
                    }

                    const data = await response.json();

                    if (!data.success) {
                        console.error("Payment initiation failed:", data.message);
                        return alert("Payment initiation failed!");
                    }

                    const options = {
                        key: data.razorpayKey,
                        amount: data.amount,
                        currency: data.currency,
                        name: "VGUIRE",
                        order_id: data.orderId,
                        handler: async function (response) {
                            console.log("Payment Success:", response);

                            // Verify the payment on the server
                            const verifyResponse = await fetch("/user/order/verify-razorpay-payment", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            if (verifyData.success) {
                                alert("Payment successful and verified!");
                                
                            } else {
                                alert("Payment verification failed!");
                            }
                        }
                    };

                    const rzp1 = new Razorpay(options);
                    rzp1.open();

                } catch (error) {
                    console.error("Payment error:", error);
                }
            });
            const payBtn = document.getElementById("pay-btn");


if (order.paymentMethod === "UPI" && order.paymentStatus === "Pending") {
    payBtn.style.display = "block";
} else {
    payBtn.style.display = "none";
}

});


    </script>
</body>
</html>
